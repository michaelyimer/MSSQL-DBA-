USE [PRODUCT DATABASE]

GO

SELECT * FROM SALES_DATA
SELECT * FROM PRODUCTS_DATA
SELECT * FROM CUSTOMERS_DATA
SELECT * FROM TIME_DATA


-- ITEM #1: HOW TO REPORT PRODUCT WISE TOTAL SALES? 
SELECT 
PRODUCTS_DATA.EnglishProductName,
SUM(SALES_DATA.SalesAmount)   AS TotalSales
FROM SALES_DATA 
INNER JOIN
PRODUCTS_DATA
ON
SALES_DATA.ProductKey = PRODUCTS_DATA.ProductKey
GROUP BY PRODUCTS_DATA.EnglishProductName


-- ITEM #2: HOW TO REPORT PRODUCT WISE TOTAL SALES ALONG WITH GRADES?
-- IIF( A>B, C, D ) MEANS IF A > B THEN REPORT C OR ELSE REPORT D
SELECT 
PRODUCTS_DATA.EnglishProductName,
SUM(SALES_DATA.SalesAmount)   AS TotalSales, IIF (SUM(SALES_DATA.SalesAmount) > 1500, 'SALE GRADE A', 'SALE GRADE B')
FROM SALES_DATA 
INNER JOIN
PRODUCTS_DATA
ON
SALES_DATA.ProductKey = PRODUCTS_DATA.ProductKey
GROUP BY PRODUCTS_DATA.EnglishProductName


-- ITEM #3: HOW TO REPORT PRODUCT WISE TOTAL SALES ALONG WITH GRADES?
SELECT 
PRODUCTS_DATA.EnglishProductName,
SUM(SALES_DATA.SalesAmount)   AS TotalSales, IIF (SUM(SALES_DATA.SalesAmount) > 1500, 'SALE GRADE A', 'SALE GRADE B') AS SaleGrade
FROM SALES_DATA 
INNER JOIN
PRODUCTS_DATA
ON
SALES_DATA.ProductKey = PRODUCTS_DATA.ProductKey
GROUP BY PRODUCTS_DATA.EnglishProductName


-- ITEM #4: HOW TO REPORT PRODUCT WISE TOTAL SALES ALONG WITH GRADES?
SELECT 
PRODUCTS_DATA.EnglishProductName,
SUM(SALES_DATA.SalesAmount)   AS TotalSales, CASE	WHEN SUM(SALES_DATA.SalesAmount) < 500					THEN 'SALE GRADE A'
													WHEN SUM(SALES_DATA.SalesAmount) BETWEEN 500 AND 1000	THEN 'SALE GRADE B'
													WHEN SUM(SALES_DATA.SalesAmount) > 1000					THEN 'SALE GRADE C'
													END AS SaleGrade
FROM SALES_DATA 
INNER JOIN
PRODUCTS_DATA
ON
SALES_DATA.ProductKey = PRODUCTS_DATA.ProductKey
GROUP BY PRODUCTS_DATA.EnglishProductName




-- ITEM #5: HOW TO REPORT TOTAL SALES & TOTAL TAX BASED ON EACH YEAR, QUARTER, MONTH AND PRODUCT?
SELECT 
T.CalendarYear, T.CalendarQuarter, T.EnglishMonthName, P.EnglishProductName AS ProductName,  
'$' + CONVERT(VARCHAR(30), SUM(S.SalesAmount)) AS TotalSales ,
'$' + CAST   (SUM(S.TaxAmt) AS VARCHAR(30))    AS TotalTax
FROM SALES_DATA  AS S
INNER JOIN 
PRODUCTS_DATA  AS P
ON
P.ProductKey = S.ProductKey
INNER JOIN 
TIME_DATA  AS T
ON
T.TimeKey = S.OrderDateKey
GROUP BY
T.CalendarYear, T.CalendarQuarter, T.EnglishMonthName, P.EnglishProductName 
ORDER BY 
T.CalendarYear, T.CalendarQuarter, T.EnglishMonthName, P.EnglishProductName 


-- ITEM #6: HOW TO REPORT TOTAL SALES & TOTAL TAX BASED ON EACH YEAR, QUARTER, MONTH AND PRODUCT?
SELECT 
T.CalendarYear, T.CalendarQuarter, T.EnglishMonthName, P.EnglishProductName AS ProductName,  
'$' + CONVERT(VARCHAR(30), ROUND(SUM(S.SalesAmount),1)) AS TotalSales ,
'$' + CONVERT(VARCHAR(30), CEILING(CAST(SUM (S.TaxAmt) AS INT)))   AS TotalTax
FROM SALES_DATA  AS S
INNER JOIN 
PRODUCTS_DATA  AS P
ON
P.ProductKey = S.ProductKey
INNER JOIN 
TIME_DATA  AS T
ON
T.TimeKey = S.OrderDateKey
GROUP BY
T.CalendarYear, T.CalendarQuarter, T.EnglishMonthName, P.EnglishProductName 
ORDER BY 
T.CalendarYear, T.CalendarQuarter, T.EnglishMonthName, P.EnglishProductName 



-- FROM DTA RECOMMENDATIONS :
CREATE NONCLUSTERED INDEX [_dta_index_PRODUCTS_DATA_5_933578364__K1_K5] ON [dbo].[PRODUCTS_DATA]
(
	[ProductKey] ASC,
	[EnglishProductName] ASC
)
WITH (SORT_IN_TEMPDB = ON, DROP_EXISTING = ON, ONLINE = ON) ON [PRIMARY]


CREATE NONCLUSTERED INDEX [_dta_index_PRODUCTS_DATA_5_933578364__K5_1] ON [dbo].[PRODUCTS_DATA]
(
	[EnglishProductName] ASC
)
INCLUDE ( 	[ProductKey]) WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF) ON [PRIMARY]

CREATE NONCLUSTERED INDEX [_dta_index_SALES_DATA_5_997578592__K1_19] ON [dbo].[SALES_DATA]
(
	[ProductKey] ASC
)
INCLUDE ( 	[SalesAmount]) WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF) ON [PRIMARY]
