 -- INSTALL THE PRODUCT DATABASE (SAMPLE DATABASE WITH SALES_DATA, CUSTOMERS, TIME, PRODUCTS).

USE [PRODUCT DATABASE]

DBCC CHECKDB	-- DATABASE CONSISTENCY CHECK COMMAND. Used to scan the database, find the errors, if any.
				-- IN THE RESULT (OUTPUT) :  SCROLL DOWN TO THE LAST BUT ONE LINE AND CHECK FOR ERRORS.

-- CONSISTENCY ERRORS	: REFER TO METADATA [DATABASE PROPERTIES, OBJECT DEFINITIONS, VIRUS ATTACK]
-- ALLOCATION ERRORS	: REFER TO STORAGE OF DATA IN DATABASE DATA FILE			[DISK ERRORS, CORRUPTED SECTORS]	

DBCC CHECKCONSTRAINTS ('SALES_DATA')		-- REPORTS ERRORS FROM TABLE LEVEL CONSTRAINTS
DBCC CHECKFILEGROUP (1)						-- REPORTS DETAILS OF FILEGROUP LEVEL ERRORS
DBCC SQLPERF(LOGSPACE)						-- TO REPORT PERCENT OF LOG SPACE USAGE FOR EVERY DATABASE IN SERVER.

SELECT * FROM MSDB.DBO.SUSPECT_PAGES		-- TO REPORT THE CORRUPTED PAGES ACROSS ALL DATABASES IN THE SERVER

DBCC PAGE(5, 1, 230)		-- NO DETAILS REPORTED. THE PAGE CONTENT IS HIDDEN.  SYNTAX:   DBCC PAGE (DBID, FILEID, PAGEID)
DBCC TRACEON (3604)			-- THIS IS CALLED "TRACE FLAG". USED TO MODIFY THE DEFAULT BEHAVIOUR OF ANY PROPERTY
DBCC PAGE(5, 1, 230)	

/*
-- ALLOCATION STATUS:
		-- GAM	:	GLOBAL ALLOCATION MAP. A bit USED TO IDENTIFY FREE SPACE IN THE DATA PAGE
		-- SGAM :   SHARED GLOBAL ALLOCATION MAP. A bit USED TO IDENTIFY FREE SPACE IN THE EXTENT
		-- BITMAP INDEX: THIS IS USED TO IDENTIFY FREE & ALLOCATED PAGES IN EXTENT.
		-- PFS :	PAGE FREE SPACE. ALLOCATION INFORMATION OF PAGES IN EXTENT. REPORTS TYPE OF EXTENT IF THE EXTENT IS FULL [UNIFORM, MIXED]

		-- DIFF :   INFORMATION ABOUT CHANGES SINCE LATEST FULL BACKUP
					STATUS	:	CHANGED					NOT CHANGED

		-- ML  :	SPECIFIES RECOVERY MODEL.  RECOVERY MODEL IS A PROPERTY TO CONTROL THE LEVEL OF LOGGING BY DATABASE LOG FILE. 
				**	1. FULL RECOVERY MODEL	:	EVERY OPERATION IS COMLETELY LOGGED. EVERY DETAIL IS LOGGED. INVOLVES MORE LOG SPACE.  **
					2. SIMPLE RECOVERY MODEL:	EVERY OPERATION IS MINIMALLY LOGGED. DATA IS NOT LOGGED. INVOLVES LESS LOG SPACE. NO LOG BACKUP
					3. BULK LOGGED RECOVERY MODEL:	EVERY OPERATION IS COMLETELY LOGGED EXCEPT BULK OPERATIONS. INVOLVES MODERATE SPACE.

		ALTER DATABASE PRODUCTDATABASE SET RECOVERY FULL			-- SIMPLE	|  BULK LOGGED
*/


/* POSSIBLE DATABASE STATES:		
	1. ONLINE	:	DATABASE IS LIVE, ONLINE. READ WRITE.
	2. OFFLINE	:	DATABASE IS OFFLINE. DB FILES EXIST BUT DATABASE NOT ACCESSIBLE.
	3. RESTORING:	DATABASE IS IN THE MID OF RECOVERY. READY FOR FURTHER RESTORES. BUT NOT ACCESSIBLE.

	4. STANDBY	:	DATABASE IS LIVE, ONLINE. READ ONLY.

	5. SINGLE USER : ONLY ONE USER CAN CONNECT TO DATABASE AT A TIME
	6. EMERGENCY   : NO NEW USER IS ALLOWED TO CONNECT TO THE DATABASE. EXISTING USERS ARE NOT AFFECTED.
	
	7. SUSPECT	   : A PART OF DATABASE IS EXPECTED TO BE OFFLINE / NOT ACCESSIBLE.
					 WE NEED TO AUDIT "SUSPECT_PAGES" SYSTEM TABLE INSIDE MSDB DATABASE TO CONFIRM THE CORRUPTIONS.

					SELECT * FROM MSDB.DBO.suspect_pages 

	8. RECOVERY PENDING:	DATABASE IS IN RESTORING STATE, BUT FURTHER RESTORES FAIL.
							IN THIS CASE, WE NEED TO SET DATABASE TO EMERGENCY MODE AND REBUILD THE DATABASE.
*/


-- SOLUTION FOR CONSISTENCY ERRORS & RECOVERY PENDING ERRORS :    
BACKUP DATABASE [PRODUCT DATABASE] TO DISK = 'E:\PRODUCTDATABASEBACKUP.bak' with FORMAT		-- if possible

USE MASTER 
GO
ALTER DATABASE [PRODUCT DATABASE] SET SINGLE_USER WITH ROLLBACK IMMEDIATE
DBCC CHECKDB('PRODUCT DATABASE', REPAIR_REBUILD)			-- THIS RECREATES THE METADATA OF THE DATABASE.
DBCC CHECKDB('PRODUCT DATABASE')							-- VERIFY THAT THERE ARE NO MORE CONSISTENCY ERRORS.
ALTER DATABASE [PRODUCT DATABASE] SET MULTI_USER


-- SOLUTION FOR FOR ALLOCATION ERRORS :
SELECT * FROM MSDB.DBO.SUSPECT_PAGES			

-- PAGE RESTORES:
RESTORE DATABASE [PRODUCT DATABASE]
PAGE = '1:230'			-- FILE_ID:PAGE_ID
FROM
DISK = 'E:\PRODUCTDATABASEBACKUP.bak'				-- LOCATION OF LATEST HEALTHY BACKUP
WITH REPLACE, RECOVERY 

-- IF MULTIPLE PAGES ARE CORRUPTED, THEN RESTORE THE FILE. 
-- IF MULTIPLE FILES ARE CORRUPTED, THEN RESTORE THE FILEGROUP. 
-- IF MULTIPLE FILEGROUPS ARE CORRUPTED, THEN RESTORE THE DATABASE. 



USE [PRODUCT DATABASE]


/*	LOG SPACE ISSUES & SOLUTIONS	*/
DBCC SQLPERF(LOGSPACE)					-- REPORTS % LOG SPACE FOR EACH DATABASE IN THE SERVER. 

-- STEP 1:	MINIMISE OPEN TRANSACTIONS		

-- STEP 2:  TRUNCATE LOG FILE, IF POSSIBLE  [BACKUP LOG FILE]	

-- STEP 3:  RELEASE EMPTY PAGES FROM LOG FILE
			EXEC SP_HELPDB 'PRODUCT DATABASE'
			DBCC SHRINKFILE('PRODUCT DATABASE_log', 10)		-- TO RELEASE 90% OF EMPTY PAGES. REMAINING 10% LEFT UNDISTURBED. 

-- STEP 4:  CONSIDER TO INCREASE SIZE OF LOG FILE
			ALTER DATABASE [PRODUCT DATABASE] MODIFY FILE (NAME = 'PRODUCT DATABASE_log', SIZE = 1250 MB)   -- 25% INCREASE

-- STEP 5:	CONSIDER TO RESET THE RECOVERY MODEL
			RESTORE DATABASE [PRODUCT DATABASE]
			FILE = 'PRODUCT DATABASE'			-- FILE_ID:PAGE_ID
			FROM
			DISK = 'E:\PRODUCTDATABASEBACKUP.bak'				-- LOCATION OF LATEST HEALTHY BACKUP
			WITH REPLACE, RECOVERY 

			ALTER DATABASE [PRODUCT DATABASE] SET RECOVERY SIMPLE	-- PERFORM FULL BACKUP BEFORE & AFTER THIS CHANGE.

-- STEP 6:	REBUILD LOG FILE [during maintenance hours]		: THIS STEP WILL RECREATE A NEW LOG FILE FOR THE DATABASE.
			ALTER DATABASE [PRODUCT DATABASE] SET EMERGENCY				-- NO NEW USERS ARE ALLOWED TO THE DATABASE. 
			ALTER DATABASE [PRODUCT DATABASE] REBUILD LOG ON (NAME = 'PRODUCT DATABASE_log', FILENAME ='E:\NEW_LOG.LDF')  -- recreate log
			DBCC CHECKDB ('PRODUCT DATABASE')
			ALTER DATABASE [PRODUCT DATABASE] SET MULTI_USER	--  PERFORM A FULL BACKUP, LOG BACKUP






-- SOLUTIONS FOR TEMPDB ISSUES:
-- STEP 1:  MINIMIZE THE NUMBER OF OPEN TRANSACTIONS

-- STEP 2:	CONSIDER TO RELEASE FREE SPACE IN TEMPDB. FOR THIS, WE NEED TO PERFORM "SHRINKING" OPERATION.
DBCC SHRINKDATABASE ('TEMPDB', 10)		-- MEANS :  RELEASE ALL EMPTY PAGES TO OS EXCEPT 10%


-- STEP 3:  CONSIDER TO INCREASE FILE SIZE OR ADD NEW DATA FILES.  
ALTER DATABASE TEMPDB ADD FILE (NAME = 'TEMPDEV2', FILENAME = 'E:\TEMPDEV2.ndf', SIZE = 1000 MB) 
ALTER DATABASE TEMPDB MODIFY FILE (NAME = 'TEMPDEV', SIZE = 1250 MB)   -- 25% INCREASE

SP_HELPDB 'TEMPDB'			-- DURING INSTALLATION, MULTIPLE TEMPDB DATAFILES ARE AUTO ADDED. PROCESSOR NODES.


-- STEP 4:	REBUILD TEMPDB. 
-- RIGHT CLICK SERVER > RESTART.  [TO BE PERFORMED DURING MAINT" HOURS]




-- SOLUTIONS FOR MEMORY ISSUES:
-- STEP 1:  MINIMISE THE USE OF MEMORY : INDEX SORTING, OPEN TRANSACTIONS, TRIGGERS TO BE MINIMIZED.

-- STEP 2:  RELEASE MEMORY TO OPERATING SYSTEM
DBCC FREESESSIONCACHE				-- CLEANS MEMORY FROM THE CURRENTLY CONNECTED SESSION

DBCC FREEPROCCACHE					-- CLEANS PROCEDURE CACHE OF THE SERVER [THIS STORES COMPILED PLANS & EXECUTION PLANS]
DBCC DROPCLEANBUFFERS				-- CLEANS BUFFER POOL OF THE SERVER		[PARAMETERS, MEMORY TABLES]
DBCC FREESYSTEMCACHE('ALL')			-- CLEANS PROCEDURE CACHE & BUFFER POOL  OF THE SERVER


-- STEP 3: CONSIDER TO INCREASE SIZE OF MEMORY		[RIGHT CLICK SERVER > PROPERTIES > MEMORY   [STATIC MEMORY ALLOCATION, DYNAMIC MEMORY ALLOCATION]
EXEC sys.sp_configure N'max server memory (MB)', N'2147483647'
GO
RECONFIGURE WITH OVERRIDE


-- STEP 4: REBUILD MEMORY. FOR THIS, WE NEED TO RESTART THE SQL SERVER SERVICE DURING OFF-PEAK HOURS.


/*
CONSISTENCY ERRORS & SOLUTIONS
ALLOCATION  ERRORS & SOLUTIONS

LOG SPACE	  ISSUES & SOLUTIONS
TEMPDB SPACE  ISSUES & SOLUTIONS
MEMORY SPACE  ISSUES & SOLUTIONS
*/

